''' Семья М. собирается купить билеты на самолет, чтобы полететь на отдых. Они выбрали рейс с двухэтажным самолётом. В семье, помимо 
папы и мамы, имеется двое детей, и билеты нужно купить так, чтобы вся семья летела в одном ряду на соседних местах. Дети хотят смотреть в 
окно, поэтому нужно одно место у окна. Места у окон считаются самые крайние места в каждом ряду (первое и последнее). 
Известно, какие места уже куплены (заняты). Найдите ряд с наибольшим номером, в котором можно забронировать четыре подряд идущие 
свободные места с одним местом у окна. Гарантируется, что есть хотя бы один ряд, удовлетворяющий этому условию. Ряды, информации о 
которых нет в списке бронирования, не учитываются.
Входные данные представлены в файле 26-94.txt следующим образом.  В первой строке входного файла находится два числа: N – количество 
занятых мест (натуральное число, не превышающее 20 000) и K – количество мест в каждом ряду самолета (натуральное число, не 
превышающее 10). Каждая из следующих N строк содержит три натуральных числа, не превышающих 100 000: номер этажа, номер ряда и номер 
занятого места в этом ряду.
Запишите в ответе два числа: максимальный номер подходящего ряда и общее количество таких рядов, в которых можно забронировать четыре 
подряд идущие свободные места с одним местом у окна.
Пример входного файла:
5 6
1 50 2
2 23 1
1 50 3
2 30 4
1 1 6
При таких исходных данных есть два подходящих ряда: 1-й ряд на 1-м этаже и 23-й ряд на 2-м этаже. Ответ: 23 2.
'''
with open(r'C:\Users\Stepan_\Documents\Informatica\Informatica_EGE\26\Авторские\11\1.txt') as f:
    N, kol_mest = [int(j) for j in f.readline().split()]
    sp = [[int(j) for j in i.split()] for i in f.readlines()]

mesta = [{}, {}]
num_row = []
# уменьшаем на одно, чтобы не париться с индексами
for i in range(len(sp)):
    sp[i][0] -= 1
    sp[i][2] -= 1

# Создаём ряды и места и занимаем их
for floor, row_num, num in sp:
    # print(floor, row_num, num)
    if row_num not in mesta[floor].keys():
        mesta[floor][row_num] = [1] * kol_mest
    mesta[floor][row_num][num] = 0


kol = 0
nomer = 0
for floor in range(2):
    for num_row in mesta[floor].keys():
        row = mesta[floor][num_row]
        if sum(row[:4]) == 4 or sum(row[-4:]) == 4:
            kol += 1
            nomer = max(nomer, num_row)
print(nomer, kol)